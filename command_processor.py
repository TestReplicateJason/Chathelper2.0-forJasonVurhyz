from fuzzy_matcher import FuzzyMatcher
from action_extractor import ActionExtractor
from config import get_users, get_chats
import re

class CommandProcessor:
    def __init__(self):
        self.matcher = FuzzyMatcher()
        self.extractor = ActionExtractor()
        self.users = get_users()
        self.chats = get_chats()
    
    @staticmethod
    def normalize_text(text):
        """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –∑–∞–º–µ–Ω—è–µ—Ç —ë –Ω–∞ –µ, —É–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é"""
        if not text:
            return ""
        text = text.lower().replace('—ë', '–µ').replace('–Å', '–µ')
        return re.sub(r'[^\w\s]', '', text)
    
    def find_recipient(self, command_text):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥–µ"""
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç—ã
        all_names = list(self.users.keys()) + list(self.chats.keys())
        
        # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match, score, index = self.matcher.find_best_match(
            command_text, 
            all_names,
            threshold=70  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        )
        
        if not best_match:
            return None, None, None
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
        if best_match in self.users:
            entity_type = "user"
            entity_id = self.users[best_match]
        else:
            entity_type = "chat"
            entity_id = self.chats[best_match]
            
        return entity_type, best_match, entity_id

    def process(self, command_text):
        if not command_text:
            return None

        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command_text}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action_type = self.extractor.detect_action(command_text)
        print(f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {action_type}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = self.extractor.extract_message_text(command_text, action_type)
        print(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_type, recipient_name, recipient_id = self.find_recipient(command_text)
        
        if not recipient_name:
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            all_names = list(self.users.keys()) + list(self.chats.keys())
            normalized_command = self.normalize_text(command_text)
            normalized_names = [self.normalize_text(name) for name in all_names]
            
            print("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞:")
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ: {all_names}")
            print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: {normalized_names}")
            print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {normalized_command}")
            return None
        
        print(f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name} ({recipient_type}, ID: {recipient_id})")
        
        return {
            "action": action_type,
            "message": message,
            "recipient_type": recipient_type,
            "recipient_id": recipient_id,
            "recipient_name": recipient_name,
            "original_command": command_text
        }